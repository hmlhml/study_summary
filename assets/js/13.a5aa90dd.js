(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{369:function(e,t,r){"use strict";r.r(t);var v=r(45),a=Object(v.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"重排和重绘"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重排和重绘"}},[e._v("#")]),e._v(" 重排和重绘")]),e._v(" "),r("h2",{attrs:{id:"清除浮动方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#清除浮动方法"}},[e._v("#")]),e._v(" 清除浮动方法")]),e._v(" "),r("ul",[r("li",[e._v("父级div定义height")]),e._v(" "),r("li",[e._v("最后一个浮动元素后加空div标签 并添加样式clear:both。")]),e._v(" "),r("li",[e._v("包含浮动元素的父标签添加样式overflow为hidden或auto。")]),e._v(" "),r("li",[e._v("父级div定义zoom")])]),e._v(" "),r("h2",{attrs:{id:"css优化方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#css优化方法"}},[e._v("#")]),e._v(" CSS优化方法")]),e._v(" "),r("ul",[r("li",[e._v("避免过度约束")]),e._v(" "),r("li",[e._v("避免后代选择符")]),e._v(" "),r("li",[e._v("避免链式选择符")]),e._v(" "),r("li",[e._v("使用紧凑的语法")]),e._v(" "),r("li",[e._v("避免不必要的命名空间")]),e._v(" "),r("li",[e._v("避免不必要的重复")]),e._v(" "),r("li",[e._v("最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么")]),e._v(" "),r("li",[e._v("避免！important，可以选择其他选择器")]),e._v(" "),r("li",[e._v("尽可能的精简规则，你可以合并不同类里的重复规则")])]),e._v(" "),r("h2",{attrs:{id:"浏览器是怎样解析css选择器的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器是怎样解析css选择器的"}},[e._v("#")]),e._v(" 浏览器是怎样解析CSS选择器的")]),e._v(" "),r("p",[e._v("CSS选择器的解析是从右向左解析的。\n若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。\n若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。\n两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。")]),e._v(" "),r("p",[e._v("而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。")]),e._v(" "),r("h2",{attrs:{id:"before-和-before有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#before-和-before有什么区别"}},[e._v("#")]),e._v(" ::before 和 :before有什么区别")]),e._v(" "),r("ul",[r("li",[e._v("单冒号(:)用于CSS3伪类，")]),e._v(" "),r("li",[e._v("双冒号(::)用于CSS3伪元素。\n::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。\n:before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before ::after")])]),e._v(" "),r("h2",{attrs:{id:"手动写动画最小时间间隔是多久"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#手动写动画最小时间间隔是多久"}},[e._v("#")]),e._v(" 手动写动画最小时间间隔是多久")]),e._v(" "),r("p",[e._v("如果需要手动写动画，你认为最小时间间隔是多久，为什么？\n多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms。")])])}),[],!1,null,null,null);t.default=a.exports}}]);